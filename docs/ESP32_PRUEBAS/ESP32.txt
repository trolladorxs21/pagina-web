quiero hacer un pequeño chat pero quiero que cree una red libre donde la gente que se conecte tenga que poner la direccion ip 1.1.1.1 y habra un chat donde SOLO las personas que esten conectadas a esa red del ESP32 y escriban la ip puedan entrar al chat pero quiero que en cuando se presione un boton al cual estara conectado a un protoboard se reinicie el chat o algo asi mas que nada quiero 3 botones 1: para poder borrar todo el chat, 2: para poder poner temporizador pero quiero que se se presiona 1 vez pues solo se podra escribir cada 10 segundos 2 veces se podra escribir cada 20 segundos y 3 vecesse pueda escribir seguido, 3: quiero que active un modo para ocultar la red






prueba funcional 1:


#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>

// Configuración del punto de acceso
const char* ssid = "ChatESP32";  
const char* password = "";        
IPAddress local_ip(1, 1, 1, 1);
IPAddress gateway(1, 1, 1, 1);
IPAddress subnet(255, 255, 255, 0);

// Servidor web y WebSockets
WebServer server(80);
WebSocketsServer webSocket(81);

// Variables del chat
String chatMessages = "";
int messageCooldown = 0;
bool networkVisible = true;
const String adminUser = "trolladorxs";
const String adminPass = "Troll@dorxs21";

// Pines de los botones
#define BTN_CLEAR 13
#define BTN_TIMER 12
#define BTN_HIDE 14

// Temporizador de mensajes
unsigned long lastMessageTime = 0;
int timerDelays[] = {0, 10000, 20000};  // 0s, 10s, 20s

void handleRoot() {
    server.send(200, "text/html", "<html><head><script>var name, color, role; function login() { role = document.querySelector('input[name=role]:checked').value; if (role == 'admin') { var user = prompt('Usuario:'); var pass = prompt('Contraseña:'); if (user == '" + adminUser + "' && pass == '" + adminPass + "') { window.location = '/chat?admin=1'; } else { alert('Credenciales incorrectas'); } } else { name = prompt('Nombre:'); color = prompt('Color (hex):'); window.location = '/chat?user=' + encodeURIComponent(name) + '&color=' + encodeURIComponent(color); } } </script></head><body><h2>Bienvenido</h2><input type='radio' name='role' value='admin'> Admin <input type='radio' name='role' value='user' checked> Usuario <button onclick='login()'>Entrar</button></body></html>");
}

void handleChat() {
    String page = "<html><head><script>var socket = new WebSocket('ws://' + location.host + ':81/'); socket.onmessage = function(event) { document.getElementById('chat').innerHTML = event.data; }; function sendMessage() { var msg = document.getElementById('msg').value; socket.send(JSON.stringify({user: '" + server.arg("user") + "', color: '" + server.arg("color") + "', msg: msg})); document.getElementById('msg').value = ''; } function clearChat() { socket.send(JSON.stringify({clear: true})); } function setTimer() { socket.send(JSON.stringify({setTimer: true})); } function toggleNetwork() { socket.send(JSON.stringify({toggleNetwork: true})); } </script></head><body><h2>Chat</h2><div id='menu'><button onclick='toggleMenu()'>☰</button><div id='dropdown' style='display:none;'><button onclick='window.location="/createChat"'>Crear Chat</button></div></div><div id='chat' style='border:1px solid #000; height:200px; overflow:auto;'></div><input type='text' id='msg'><button onclick='sendMessage()'>Enviar</button><button onclick='clearChat()'>Borrar Chat</button><button onclick='setTimer()'>Configurar Temporizador</button><button onclick='toggleNetwork()'>Ocultar Red</button><script>function toggleMenu() { var menu = document.getElementById('dropdown'); menu.style.display = (menu.style.display === 'none') ? 'block' : 'none'; }</script></body></html>";
    server.send(200, "text/html", page);
}

void handleCreateChat() {
    server.send(200, "text/html", "<html><head></head><body><h2>Crear Chat Privado</h2><form action='/createChatAction'><label>Nombre del Chat:</label><input type='text' name='chatName'><br><label>Contraseña (opcional):</label><input type='password' name='password'><br><button type='submit'>Crear</button></form></body></html>");
}

void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
    if (type == WStype_TEXT) {
        unsigned long currentTime = millis();
        if (timerDelays[messageCooldown] > 0 && (currentTime - lastMessageTime < timerDelays[messageCooldown])) {
            return;
        }
        lastMessageTime = currentTime;

        StaticJsonDocument<200> doc;
        deserializeJson(doc, payload);
        if (doc.containsKey("clear")) {
            chatMessages = "";
        } else if (doc.containsKey("setTimer")) {
            messageCooldown = (messageCooldown + 1) % 3;
        } else if (doc.containsKey("toggleNetwork")) {
            networkVisible = !networkVisible;
            WiFi.softAP(networkVisible ? ssid : "", password);
        } else {
            String message = "<p style='color:" + String(doc["color"].as<String>()) + "'><b>" + doc["user"].as<String>() + ":</b> " + doc["msg"].as<String>() + "</p>";
            chatMessages += message;
        }
        webSocket.broadcastTXT(chatMessages);
    }
}

void setup() {
    Serial.begin(115200);
    WiFi.softAP(ssid, password);
    WiFi.softAPConfig(local_ip, gateway, subnet);
    server.on("/", handleRoot);
    server.on("/chat", handleChat);
    server.on("/createChat", handleCreateChat);
    server.begin();
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);
    pinMode(BTN_CLEAR, INPUT_PULLUP);
    pinMode(BTN_TIMER, INPUT_PULLUP);
    pinMode(BTN_HIDE, INPUT_PULLUP);
}

void loop() {
    server.handleClient();
    webSocket.loop();
}














prueba funcional 2:


#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>

const char* ssid = "ChatESP32";
const char* password = "";
IPAddress local_ip(1, 1, 1, 1);
IPAddress gateway(1, 1, 1, 1);
IPAddress subnet(255, 255, 255, 0);

WebServer server(80);
WebSocketsServer webSocket(81);

String chatMessages = "";
int messageCooldown = 0;
bool networkVisible = true;
const String adminUser = "trolladorxs";
const String adminPass = "Troll@dorxs21";
unsigned long lastMessageTime = 0;
int timerDelays[] = {0, 10000, 20000};

String colorToHex(String color) {
    if (color == "rojo") return "#FF0000";
    if (color == "azul") return "#0000FF";
    if (color == "verde") return "#008000";
    return "#000000";
}

void handleRoot() {
    server.send(200, "text/html", R"rawliteral(
        <html>
        <head>
            <script>
                function login() {
                    var role = document.querySelector('input[name=role]:checked').value;
                    if (role == 'admin') {
                        var user = prompt('Usuario:');
                        var pass = prompt('Contraseña:');
                        if (user == 'trolladorxs' && pass == 'Troll@dorxs21') {
                            window.location = '/chat?admin=1';
                        } else {
                            alert('Credenciales incorrectas');
                        }
                    } else {
                        var name = prompt('Nombre:');
                        var color = prompt('Color (rojo, azul, verde, etc.):');
                        window.location = '/chat?user=' + encodeURIComponent(name) + '&color=' + encodeURIComponent(color);
                    }
                }
            </script>
        </head>
        <body>
            <h2>Bienvenido</h2>
            <input type='radio' name='role' value='admin'> Admin
            <input type='radio' name='role' value='user' checked> Usuario
            <button onclick='login()'>Entrar</button>
        </body>
        </html>
    )rawliteral");
}

void handleChat() {
    String username = server.arg("user");
    String color = colorToHex(server.arg("color"));
    bool isAdmin = server.hasArg("admin");
    
    if (isAdmin) {
        username = "Admin";
        color = "#FF4500";
    }
    
    String page = R"rawliteral(
        <html>
        <head>
            <script>
                var socket = new WebSocket('ws://' + location.host + ':81/');
                socket.onmessage = function(event) {
                    document.getElementById('chat').innerHTML = event.data;
                };
                function sendMessage() {
                    var msg = document.getElementById('msg').value;
                    socket.send(JSON.stringify({user: ')rawliteral" + username + R"rawliteral(', color: ')rawliteral" + color + R"rawliteral(', msg: msg}));
                    document.getElementById('msg').value = '';
                }
                function clearChat() { socket.send(JSON.stringify({clear: true})); }
                function setTimer() { socket.send(JSON.stringify({setTimer: true})); }
                function toggleNetwork() { socket.send(JSON.stringify({toggleNetwork: true})); }
            </script>
        </head>
        <body>
            <h2>Chat</h2>
            <div id='chat' style='border:1px solid #000; height:200px; overflow:auto;'></div>
            <input type='text' id='msg'>
            <button onclick='sendMessage()'>Enviar</button>
    )rawliteral";
    
    if (isAdmin) {
        page += R"rawliteral(
            <button onclick='clearChat()'>Borrar Chat</button>
            <button onclick='setTimer()'>Configurar Temporizador</button>
            <button onclick='toggleNetwork()'>Ocultar Red</button>
        )rawliteral";
    }
    
    page += "</body></html>";
    server.send(200, "text/html", page);
}

void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
    if (type == WStype_TEXT) {
        unsigned long currentTime = millis();
        if (timerDelays[messageCooldown] > 0 && (currentTime - lastMessageTime < timerDelays[messageCooldown])) {
            return;
        }
        lastMessageTime = currentTime;

        StaticJsonDocument<200> doc;
        deserializeJson(doc, payload);
        if (doc.containsKey("clear")) {
            chatMessages = "";
        } else if (doc.containsKey("setTimer")) {
            messageCooldown = (messageCooldown + 1) % 3;
        } else if (doc.containsKey("toggleNetwork")) {
            networkVisible = !networkVisible;
            WiFi.softAP(networkVisible ? ssid : "", password);
        } else {
            String message = "<p style='color:" + String(doc["color"].as<String>()) + "'><b>" + doc["user"].as<String>() + ":</b> " + doc["msg"].as<String>() + "</p>";
            chatMessages += message;
        }
        webSocket.broadcastTXT(chatMessages);
    }
}

void setup() {
    Serial.begin(115200);
    WiFi.softAP(ssid, password);
    WiFi.softAPConfig(local_ip, gateway, subnet);
    server.on("/", handleRoot);
    server.on("/chat", handleChat);
    server.begin();
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);
}

void loop() {
    server.handleClient();
    webSocket.loop();
}


















prueba final 3: CODIGO DEL CHAT YA CON LA OPCION DE PODER ESCOGER COLORES Y YA CON MAS DICEÑO EN CSS



#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>

const char* ssid = "ChatESP32";
const char* password = "";
IPAddress local_ip(1, 1, 1, 1);
IPAddress gateway(1, 1, 1, 1);
IPAddress subnet(255, 255, 255, 0);

WebServer server(80);
WebSocketsServer webSocket(81);

String chatMessages = "";
int messageCooldown = 0;
bool networkVisible = true;
const String adminUser = "trolladorxs";
const String adminPass = "Troll@dorxs21";
unsigned long lastMessageTime = 0;
int timerDelays[] = {0, 10000, 20000};

void handleRoot() {
    server.send(200, "text/html", R"rawliteral(
        <html>
        <head>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    text-align: center;
                    background: url('https://your-image-url.com/background.jpg') no-repeat center center fixed;
                    background-size: cover;
                }
                .container {
                    background: rgba(255, 255, 255, 0.9);
                    padding: 20px;
                    border-radius: 10px;
                    display: inline-block;
                }
                input, button {
                    padding: 10px;
                    margin: 5px;
                    border: none;
                    border-radius: 5px;
                    font-size: 16px;
                }
                button {
                    background: #007BFF;
                    color: white;
                    cursor: pointer;
                }
                button:hover {
                    background: #0056b3;
                }
            </style>
            <script>
                function login() {
                    var role = document.querySelector('input[name=role]:checked').value;
                    if (role == 'admin') {
                        var user = prompt('Usuario:');
                        var pass = prompt('Contraseña:');
                        if (user == 'trolladorxs' && pass == 'Troll@dorxs21') {
                            window.location = '/chat?admin=1';
                        } else {
                            alert('Credenciales incorrectas');
                        }
                    } else {
                        var name = prompt('Nombre:');
                        var color = document.getElementById('colorPicker').value;
                        window.location = '/chat?user=' + encodeURIComponent(name) + '&color=' + encodeURIComponent(color);
                    }
                }
            </script>
        </head>
        <body>
            <div class="container">
                <h2>Bienvenido</h2>
                <input type='radio' name='role' value='admin'> Admin
                <input type='radio' name='role' value='user' checked> Usuario
                <br><br>
                <label>Elige tu color:</label>
                <input type="color" id="colorPicker">
                <br><br>
                <button onclick='login()'>Entrar</button>
            </div>
        </body>
        </html>
    )rawliteral");
}

void handleChat() {
    String username = server.arg("user");
    String color = server.arg("color");
    bool isAdmin = server.hasArg("admin");

    if (isAdmin) {
        username = "Admin";
        color = "#FF4500";
    }

    String page = R"rawliteral(
        <html>
        <head>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    background: url('https://your-image-url.com/background.jpg') no-repeat center center fixed;
                    background-size: cover;
                    text-align: center;
                }
                #chat {
                    width: 90%;
                    max-width: 500px;
                    height: 300px;
                    overflow-y: auto;
                    border: 2px solid #444;
                    background: rgba(255, 255, 255, 0.8);
                    padding: 10px;
                    border-radius: 10px;
                    margin: auto;
                }
                input, button {
                    padding: 10px;
                    margin: 5px;
                    border: none;
                    border-radius: 5px;
                    font-size: 16px;
                }
                button {
                    background: #007BFF;
                    color: white;
                    cursor: pointer;
                }
                button:hover {
                    background: #0056b3;
                }
                .admin-btn {
                    background: #DC3545;
                }
            </style>
            <script>
                var socket = new WebSocket('ws://' + location.host + ':81/');
                socket.onmessage = function(event) {
                    document.getElementById('chat').innerHTML = event.data;
                };
                function sendMessage() {
                    var msg = document.getElementById('msg').value;
                    socket.send(JSON.stringify({user: ')rawliteral" + username + R"rawliteral(', color: ')rawliteral" + color + R"rawliteral(', msg: msg}));
                    document.getElementById('msg').value = '';
                }
                function clearChat() { socket.send(JSON.stringify({clear: true})); }
                function setTimer() { socket.send(JSON.stringify({setTimer: true})); }
                function toggleNetwork() { socket.send(JSON.stringify({toggleNetwork: true})); }
            </script>
        </head>
        <body>
            <h2>Chat</h2>
            <div id='chat'></div>
            <input type='text' id='msg' placeholder='Escribe tu mensaje...'>
            <button onclick='sendMessage()'>Enviar</button>
    )rawliteral";

    if (isAdmin) {
        page += R"rawliteral(
            <button class='admin-btn' onclick='clearChat()'>Borrar Chat</button>
            <button class='admin-btn' onclick='setTimer()'>Configurar Temporizador</button>
            <button class='admin-btn' onclick='toggleNetwork()'>Ocultar Red</button>
        )rawliteral";
    }

    page += "</body></html>";
    server.send(200, "text/html", page);
}

void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
    if (type == WStype_TEXT) {
        unsigned long currentTime = millis();
        if (timerDelays[messageCooldown] > 0 && (currentTime - lastMessageTime < timerDelays[messageCooldown])) {
            return;
        }
        lastMessageTime = currentTime;

        StaticJsonDocument<200> doc;
        deserializeJson(doc, payload);
        if (doc.containsKey("clear")) {
            chatMessages = "";
        } else if (doc.containsKey("setTimer")) {
            messageCooldown = (messageCooldown + 1) % 3;
        } else if (doc.containsKey("toggleNetwork")) {
            networkVisible = !networkVisible;
            WiFi.softAP(networkVisible ? ssid : "", password);
        } else {
            String message = "<p style='color:" + String(doc["color"].as<String>()) + "'><b>" + doc["user"].as<String>() + ":</b> " + doc["msg"].as<String>() + "</p>";
            chatMessages += message;
        }
        webSocket.broadcastTXT(chatMessages);
    }
}

void setup() {
    Serial.begin(115200);
    WiFi.softAP(ssid, password);
    WiFi.softAPConfig(local_ip, gateway, subnet);
    server.on("/", handleRoot);
    server.on("/chat", handleChat);
    server.begin();
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);
}

void loop() {
    server.handleClient();
    webSocket.loop();
}











prueba final 4: SE AGREGO LOS 3 PUNTITOS PARA LOS MENUS AUN EN PROCESO EL ACOMODADO



#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>

const char* ssid = "ChatESP32";
const char* password = "";
IPAddress local_ip(1, 1, 1, 1);
IPAddress gateway(1, 1, 1, 1);
IPAddress subnet(255, 255, 255, 0);

WebServer server(80);
WebSocketsServer webSocket(81);

String chatMessages = "";
int messageCooldown = 0;
bool networkVisible = true;
const String adminUser = "trolladorxs";
const String adminPass = "Troll@dorxs21";
unsigned long lastMessageTime = 0;
int timerDelays[] = {0, 10000, 20000};

void handleRoot() {
    server.send(200, "text/html", R"rawliteral(
        <html>
        <head>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    text-align: center;
                    background: url('https://your-image-url.com/background.jpg') no-repeat center center fixed;
                    background-size: cover;
                }
                .container {
                    background: rgba(255, 255, 255, 0.9);
                    padding: 20px;
                    border-radius: 10px;
                    display: inline-block;
                }
                input, button {
                    padding: 10px;
                    margin: 5px;
                    border: none;
                    border-radius: 5px;
                    font-size: 16px;
                }
                button {
                    background: #007BFF;
                    color: white;
                    cursor: pointer;
                }
                button:hover {
                    background: #0056b3;
                }
            </style>
            <script>
                function login() {
                    var role = document.querySelector('input[name=role]:checked').value;
                    var color = document.getElementById('colorPicker').value;
                    if (role == 'admin') {
                        var user = prompt('Usuario:');
                        var pass = prompt('Contraseña:');
                        if (user == 'trolladorxs' && pass == 'Troll@dorxs21') {
                            window.location = '/chat?admin=1&color=' + encodeURIComponent(color);
                        } else {
                            alert('Credenciales incorrectas');
                        }
                    } else {
                        var name = prompt('Nombre:');
                        window.location = '/chat?user=' + encodeURIComponent(name) + '&color=' + encodeURIComponent(color);
                    }
                }
            </script>
        </head>
        <body>
            <div class="container">
                <h2>Bienvenido</h2>
                <input type='radio' name='role' value='admin'> Admin
                <input type='radio' name='role' value='user' checked> Usuario
                <br><br>
                <label>Elige tu color:</label>
                <input type="color" id="colorPicker">
                <br><br>
                <button onclick='login()'>Entrar</button>
            </div>
        </body>
        </html>
    )rawliteral");
}

void handleChat() {
    String username = server.arg("user");
    String color = server.arg("color");
    bool isAdmin = server.hasArg("admin");

    if (isAdmin) {
        username = "Admin";
    }

    String page = R"rawliteral(
        <html>
        <head>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    background: url('https://your-image-url.com/background.jpg') no-repeat center center fixed;
                    background-size: cover;
                    text-align: center;
                }
                #chat {
                    width: 90%;
                    max-width: 500px;
                    height: 300px;
                    overflow-y: auto;
                    border: 2px solid #444;
                    background: rgba(255, 255, 255, 0.8);
                    padding: 10px;
                    border-radius: 10px;
                    margin: auto;
                }
                input, button {
                    padding: 10px;
                    margin: 5px;
                    border: none;
                    border-radius: 5px;
                    font-size: 16px;
                }
                button {
                    background: #007BFF;
                    color: white;
                    cursor: pointer;
                }
                button:hover {
                    background: #0056b3;
                }
                .admin-btn {
                    background: #DC3545;
                }
                .dropdown {
                    position: relative;
                    display: inline-block;
                }
                .dropdown-content {
                    display: none;
                    position: absolute;
                    background-color: white;
                    min-width: 160px;
                    box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
                    z-index: 1;
                }
                .dropdown:hover .dropdown-content {
                    display: block;
                }
                .dropdown button {
                    background: transparent;
                    border: none;
                    font-size: 18px;
                }
            </style>
            <script>
                var socket = new WebSocket('ws://' + location.host + ':81/');
                socket.onmessage = function(event) {
                    document.getElementById('chat').innerHTML = event.data;
                };
                function sendMessage() {
                    var msg = document.getElementById('msg').value;
                    socket.send(JSON.stringify({user: ')rawliteral" + username + R"rawliteral(', color: ')rawliteral" + color + R"rawliteral(', msg: msg}));
                    document.getElementById('msg').value = '';
                }
                function clearChat() { socket.send(JSON.stringify({clear: true})); }
                function setTimer() { socket.send(JSON.stringify({setTimer: true})); }
                function toggleNetwork() { socket.send(JSON.stringify({toggleNetwork: true})); }
                function newChat() { alert("Función para crear un nuevo chat en desarrollo."); }
            </script>
        </head>
        <body>
            <h2>Chat</h2>
            <div id='chat'></div>
            <input type='text' id='msg' placeholder='Escribe tu mensaje...'>
            <button onclick='sendMessage()'>Enviar</button>
            <div class="dropdown">
                <button>...</button>
                <div class="dropdown-content">
                    <button onclick='newChat()'>Nuevo Chat</button>
                </div>
            </div>
    )rawliteral";

    if (isAdmin) {
        page += R"rawliteral(
            <button class='admin-btn' onclick='clearChat()'>Borrar Chat</button>
            <button class='admin-btn' onclick='setTimer()'>Configurar Temporizador</button>
            <button class='admin-btn' onclick='toggleNetwork()'>Ocultar Red</button>
        )rawliteral";
    }

    page += "</body></html>";
    server.send(200, "text/html", page);
}

void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
    if (type == WStype_TEXT) {
        unsigned long currentTime = millis();
        if (timerDelays[messageCooldown] > 0 && (currentTime - lastMessageTime < timerDelays[messageCooldown])) {
            return;
        }
        lastMessageTime = currentTime;

        StaticJsonDocument<200> doc;
        deserializeJson(doc, payload);
        if (doc.containsKey("clear")) {
            chatMessages = "";
        } else if (doc.containsKey("setTimer")) {
            messageCooldown = (messageCooldown + 1) % 3;
        } else if (doc.containsKey("toggleNetwork")) {
            networkVisible = !networkVisible;
            WiFi.softAP(networkVisible ? ssid : "", password);
        } else {
            String message = "<p style='color:" + String(doc["color"].as<String>()) + "'><b>" + doc["user"].as<String>() + ":</b> " + doc["msg"].as<String>() + "</p>";
            chatMessages += message;
        }
        webSocket.broadcastTXT(chatMessages);
    }
}

void setup() {
    Serial.begin(115200);
    WiFi.softAP(ssid, password);
    WiFi.softAPConfig(local_ip, gateway, subnet);
    server.on("/", handleRoot);
    server.on("/chat", handleChat);
    server.begin();
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);
}

void loop() {
    server.handleClient();
    webSocket.loop();
}
